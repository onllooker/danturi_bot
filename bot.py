from twitchio.ext import commands
from database import create_table, save_to_db, get_user_points
from cogs import MyCog
import random

class Bot(commands.Bot):
    def __init__(self, channel, lyt_cooldown, casino_cooldown, mark_admin):
        super().__init__(token='8fn77ck34t909kw3rtac8xi91vzxoq', prefix='!', initial_channels=[channel])
        self.channel = channel
        self.add_cog(MyCog(self, lyt_cooldown, casino_cooldown, mark_admin))

    async def event_ready(self):
        print(f'Logged in as | {self.nick}')
        print(f'User id is | {self.user_id}')
        await create_table()

    async def event_command_error(self, context: commands.Context, error: Exception):
        if isinstance(error, commands.CommandNotFound):
            return
        elif isinstance(error, commands.ArgumentParsingFailed):
            await context.send(error.message)
        else:
            print(error)

    @commands.command(name="–î–û", aliases=["–¥–æ"])
    async def check_do(self,ctx:commands.Context):
        total_points = await get_user_points(ctx.author.name)
        await ctx.send('@'+ctx.author.name+', '+'—É —Ç–µ–±—è '+str(total_points)+"–î–û")

    @commands.command(name="–õ–£–¢", aliases=['–ª—É—Ç'])
    async def lyt(self, ctx: commands.Context):
        try:
            voting_cog = self.get_cog('MyCog')
            await voting_cog.check_cooldown(ctx.message, 'loot')
        except commands.CommandOnCooldown as e:
            remaining_time = e.retry_after
            await ctx.send(f'–ü–©. –ü–©. –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: {remaining_time} —Å–µ–∫—É–Ω–¥!')
            return
        events = [
            (random.choice(["–ó–¥–µ—Å—å –ø—É—Å—Ç–æ! –ü–æ–∏—â–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ :)", "–ü–æ—Ö–æ–∂–µ, –Ω–µ–≤–µ–∑–µ–Ω–∏–µ –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç —Ç–µ–±—è... –ö–∞–∫ –∂–∞–ª—å :(", "–í–ê–£, –ù–ï–£–ñ–ï–õ–ò? –ê, –Ω–µ—Ç. –ò–∑–≤–∏–Ω–∏, —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç! :D"]), 0),
            ("–ß—Ç–æ –∂, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –≤—Å—Ç—Ä–µ—Ç–∏–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!", 5),
            ("–ü—Ä–æ—Å–∫–æ–ª—å–∑–Ω—É–≤ —Å–∫–≤–æ–∑—å –ø–µ—â–µ—Ä—É, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å —á—Ç–æ-—Ç–æ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–∑–∞!", 10),
            ("–û–ì–û! –¶–µ–ª—ã–π –¥–∞–Ω–≥–æ! –ú–æ–∂–µ—Ç, —Å—ä–µ—Å—Ç—å?", 1),
            ("–≠—Ç–æ –∂–µ?! –ü—Ä–µ–æ–¥–æ–ª–µ–≤ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å –¥–æ—Å—Ç–æ–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!", 20),
            ("–¢–µ–±—è –æ–∫—Ä—É–∂–∞—é—Ç —Ç—Ä–∏ –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∞, –ª–æ–≤—è—Ç –∏ –ø—Ä–∏—Å—Ç–∞–≤–ª—è—é—Ç –∫ —Ç–µ–±–µ —Å–≤–æ–∏ –¥–∞–Ω–≥–æ. –ß—Ç–æ –∂. –£ –≤—Å–µ–≥–æ –µ—Å—Ç—å –ø–ª—é—Å—ã!", 3),
            ("–°–ø—Ä—è—á–µ—à—å —Å—Ç–≤–æ–ª - –±—É–¥–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä. –¢—ã —Ç–µ—Ä—è–µ—à—å —á–∞—Å—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏", 2),
            ("–î–ê–ù–ì–û–ü–û–¢! –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ —Å—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—é?!", 30)
        ]

        probabilities = [0.50, 0.20, 0.10, 0.10, 0.05, 0.03, 0.01, 0.01]
        event_func = random.choices(events, probabilities, k=1)
        await save_to_db(ctx.author.name, event_func[0][1])
        total_points = await get_user_points(ctx.author.name)
        await ctx.send('@'+ctx.author.name+', '+event_func[0][0]+f' ({"+" + str(event_func[0][1]) if event_func[0][1] >= 0 else str(event_func[0][1])}–î–û / {total_points}–î–û)')

    def stop(self):
        self.loop.stop()

    @commands.command(name="–ö–ê–ó–ò–ù–û", aliases=["–∫–∞–∑–∏–Ω–æ"])
    async def casino(self, ctx: commands.Context):
        args = ctx.message.content.split()
        if len(args) != 2 or not args[1].isdigit() or not (1 <= int(args[1]) <= 10):
            await ctx.send(f'@{ctx.author.name}, —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10.')
            return

        try:
            my_cog = self.get_cog('MyCog')
            await my_cog.check_cooldown(ctx.message, 'casino')
        except commands.CommandOnCooldown as e:
            remaining_time = e.retry_after
            await ctx.send(f'–ö–∞–∑–∏–Ω–æ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ: {remaining_time} —Å–µ–∫—É–Ω–¥!')
            return
        casino_bet = int(args[1])
        user_points = await get_user_points(ctx.author.name)

        if user_points < casino_bet:
            await ctx.send(f'@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –î–û –¥–ª—è —Å—Ç–∞–≤–∫–∏. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_points} –î–û.')
            return

        symbols = ["üç°", "ü™µ", "üçì", "üçí", "üçã", "üçå", "üçâ", "ü•ù", "ü••", "üçè", "üçë"]
        result = [random.choice(symbols) for _ in range(3)]
        result_str = ''.join(result)

        if result_str == "üç°üç°üç°":
            points = 50
            response = "–î–ê–ù–ì–û–ü–û–¢! –í—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ 50 –î–û!"
        elif result_str == "ü™µü™µü™µ":
            points = 30
            response = "–ë–†–ï–í–ù–ê! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è ‚Äî –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 30 –î–û!"
        elif result_str == "üçâüçâüçâ":
            points = 5
            response = "–ê–†–ë–£–ó–ù–´–ô –õ–û–†–î! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è + 5 –î–û —Å–≤–µ—Ä—Ö—É!"
        elif result[0] == result[1] == result[2]:
            points = 0  # –µ—Å–ª–∏ 3 –ª—é–±—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞, –∫—Ä–æ–º–µ –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤—ã—à–µ, —ç—Ç–æ —Å–ª—É—á–∞–π —Å "–¢–†–ò –í –†–Ø–î"
            response = "–¢–†–ò –í –†–Ø–î! –í—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É!"
        else:
            points = -casino_bet
            response = "... –£–≤—ã, –∫–∞–∑–∏–Ω–æ –æ–±—ã–≥—Ä–∞–ª–æ –≤–∞—Å!"

        await save_to_db(ctx.author.name, points)
        total_points = await get_user_points(ctx.author.name)
        await ctx.send(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: [{result_str}] ‚Äî {response} ({total_points} –î–û)')

    @commands.command(name="–û–¶–ï–ù–ö–ê", aliases=["–æ—Ü–µ–Ω–∫–∞"])
    async def start_voting(self, ctx: commands.Context):
        if ctx.author.name.lower() == 'danturi_i':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞
            self.get_cog('MyCog').voting_active = True
            self.get_cog('MyCog').votes = {}  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞
            await ctx.send('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 10.')

    @commands.command(name="–û–¶–ï–ù–ö–ê–°–¢–û–ü", aliases=["–æ—Ü–µ–Ω–∫–∞—Å—Ç–æ–ø"])
    async def stop_voting(self, ctx: commands.Context):
        if ctx.author.name.lower() == 'danturi_i':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞
            self.get_cog('MyCog').voting_active = False

            if self.get_cog('MyCog').votes:
                average_score = sum(self.get_cog('MyCog').votes.values()) / len(self.get_cog('MyCog').votes)
                await ctx.send(f'–ì–û–õ–û–°–û–í–ê–ù–ò–ï –û–ö–û–ù–ß–ï–ù–û! –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {average_score:.2f}')
            else:
                await ctx.send('–ì–û–õ–û–°–û–í–ê–ù–ò–ï –û–ö–û–ù–ß–ï–ù–û! –û—Ü–µ–Ω–æ–∫ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ.')